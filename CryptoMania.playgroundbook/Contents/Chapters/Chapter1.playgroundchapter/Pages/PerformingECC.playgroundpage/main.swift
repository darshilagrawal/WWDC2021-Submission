//#-hidden-code
import PlaygroundSupport
import SwiftUI
import Foundation
import AVKit
//#-end-hidden-code
import CryptoKit
/*:
 
 # Let's Get Started By Creating a Public and Private Key
 
 
 * Callout(Objective:):
Perform Symmetric Key Generation Using Salting and Elliptic Key Cryptography

## Let us again Call Our Saviours Bob and Alice to help us out.
 
## Both Of them will create a Private Key
 */
let bobPrivateKey = P256.KeyAgreement.PrivateKey()
let alicePrivateKey = P256.KeyAgreement.PrivateKey()
//: They will Use this private key to create their Public Key
let bobPublicKey = bobPrivateKey.publicKey
let alicePublicKey = alicePrivateKey.publicKey

//: For Additional Protection Both of them decide to use [Salting](glossary://Salting) and decide a common phrase.

let saltData = /*#-editable-code*/"Imitation Games is a great Film"/*#-end-editable-code*/.data(using: .utf8)!

/*:
 - Note: **.data** is used because this salt value will be sent over the channel
*/

/*:
  Bob and Alice send each other their Public Key
*/

//: Bob Uses Alice's public key with his own Private key to Create a [Shared Secret](glossary://Shared%20Secret) which is finally used to create a Symmetric Key

let bobSharedSecret = try! bobPrivateKey.sharedSecretFromKeyAgreement(with: alicePublicKey)

/*:
 * Callout(Promises Fulfilled:):As Promised in the First Page, Now You Know everything about a Shared Secret
 */

let bobSymmetricKey=bobSharedSecret.hkdfDerivedSymmetricKey(using: SHA256.self, salt: saltData, sharedInfo: Data(), outputByteCount: 32)


/*:
 Alice will Repeat The Same Steps To create Her Own Symmetric Key
*/

let aliceSharedSecret = try! alicePrivateKey.sharedSecretFromKeyAgreement(with: bobPublicKey)
let aliceSymmetricKey=aliceSharedSecret.hkdfDerivedSymmetricKey(using: SHA256.self, salt: saltData, sharedInfo: Data(), outputByteCount: 32)
/*:
**Here Comes the Magical Part**.
*/
/*:
 The Symmetric key generated by both Bob and Alice are EXACTLY THE SAME. and yet they don't know about each others Private Key.
*/

//: If You don't believe what I just said, Let's check it Out Together. **Are You Ready**

if bobSymmetricKey == aliceSymmetricKey{
    successView()
}else{
    failureView()
}

//: Now You Can Use this Symmetric Key for Digital Signature,HMAC or [Sealed-Box Encryption](glossary://Sealed%20Box%20Encryption)

/*:
 ## To Read More about Cryptography and CryptoKit you can read Apple's Official Documentation.
 */

//: Hope You Enjoyed this Playground and developed a liking towards Cryptography.
//#-hidden-code
   
func successView(){
    PlaygroundPage.current.assessmentStatus = .pass(message: "### Congratulations!! You've Succesfully Completed this Playground Book,Hope You Learned Something New Today [**Click Here To Start Again**](Introduction)")
    PlaygroundPage.current.setLiveView(
        ZStack{
            Image("Page2")
                .resizable()
                .aspectRatio(contentMode: .fill)
                .ignoresSafeArea()
            
            VStack {
                VStack(alignment: .center) {
                    
                    Text("Both The Keys Are Same")
                        .underline()
                        .font(.custom("HelveticaNeue-UltraLight", size: 30))
                        .padding(.leading,10)
                        .padding(.trailing,10)
                    
                    Text("You can Encrypt your Data Using this Key")
                        .font(Font.system(size:50, design: .serif))
                        .padding(EdgeInsets(top: 10, leading: 20, bottom: 0, trailing: 10))
                    
                    
                }
                .frame(width:400, alignment: .center)
                .ignoresSafeArea()
                .background(Color.white
                                .shadow(color:.black,radius: 5))
                .border(Color.white, width: 4)
                .foregroundColor(.black)
                .font(.custom("special", size: 33))
                Spacer().frame(height:300)
            }
            
        }
    )
    
}

func failureView(){
    PlaygroundPage.current.assessmentStatus = .fail(hints : [" # The Key which You are using(*symmetricKeyNOTVALID*) is not the same key used for Signing The data"], solution: nil)
    
    PlaygroundPage.current.setLiveView(
        ZStack{
            Image("Page2")
                .resizable()
                .aspectRatio(contentMode: .fill)
                .ignoresSafeArea()
            
            VStack {
                VStack(alignment: .center) {
                    
                    Text("Both The Keys are  Not Equal")
                        .underline()
                        .font(.custom("HelveticaNeue-UltraLight", size: 30))
                        .padding(.leading,10)
                        .padding(.trailing,10)
                    
                    Text("Try Again")
                        .font(Font.system(size:50, design: .serif))
                        .padding(EdgeInsets(top: 10, leading: 20, bottom: 0, trailing: 10))
                    
                    
                }
                .frame(width:400, alignment: .center)
                .ignoresSafeArea()
                .background(Color.white
                                .shadow(color:.black,radius: 5))
                .border(Color.white, width: 4)
                .foregroundColor(.black)
                .font(.custom("special", size: 33))
                Spacer().frame(height:300)
            }
            
        }
    )
}
//#-end-hidden-code
